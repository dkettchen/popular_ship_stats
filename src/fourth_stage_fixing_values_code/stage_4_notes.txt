#TODO:
-testing for our cleaned data!
    -each dict is a new item, not mutated (check for each stage of running)
        -this should not fuck with our files as majority of them only run in main file
            -> comment out the ones that don't??
    -read from our finished list & check that the data is in the format we expected
        -at least one name part value is populated
        -full name is a string that isn't empty or all white spaces
        -there are no brackets in any of the full names other than in the connor & venom ones
        -there is only one version per name (how do we check that? maybe list vs set?)
        -there is 1 or more old version in op versions
        -op versions are unique values
        -format of final dict? just to make sure
        -we didn't lose any fandoms (check against clean fandoms list)
        -we didn't lose any characters (check against old versions I guess)
    -test our util func too ✅
        -mock data to feed in
        -test that exceptions are being formatted correctly
        -test that it didn't mutate input, output is new
        -test that it returns any non-used key unchanged
        -test that it returns any used key other than nick & full unchanged
        -test that it removes single quotes from nick where present
            -and that it leaves quote-less nicks as is
        -test that it retains same amount & names of keys in output as in input (no keys lost or added)

-collect each character's listed og fandom names (ONLY ONES *THEY SPECIFICALLY* ARE LISTED WITH)
    -make new key for each character dict for op fandoms (possibly rename op version to op names)
    -where og character name is in op versions of our character -> add og fandom
        -compare against fandoms w their og versions list (make sure is up to date)
        to cut down on running time needed for iterations

-spring clean ref folder
    -make a copy of em? or at least move/relabel em to be easier to find as our main ref for later
    rather than a working inbetween -> this may require renaming file paths in running order files
    -> make a version that has a RPF or Fic attribute on each char profile instead of two categories?
    (generally have a clean-up of your ref folder incl refactoring filepaths where needed in files)

-clean main files for this stage 
    -AFTER we've collected all the names & fandoms & stored them in other files
    -go through each main data set
    -replace fandom values w clean fandom equivalent using ref list
    -replace characters (keep in order) w clean full names (details can stay in other file)
    -create new files to store the cleaned main files
    


# pandas will be hecking useful for some of this current shuffling things about!
    # I am tempted to like- refactor a bunch of my functions to use pandas instead ToT
# update: we can use pandas to add the clean info to our main data sets, 
# but I still think it'll be easier to do the cleaning manually in regular python
# where I feel like I can have more control (with my current skills) and flexibility


#TODO:
# remove doubles ✅
    #doubles are generally caused by:
        # missing parts of names vs present ones
        # brackets specifying property we don't need to specify
    # -> remove brackets ✅
    # for missing name parts more formatting is needed (see below) ✅
        # check that bracket caused doubles have been removed ✅
        # separate & collect name parts ✅
            # split at " | " for aliases ✅
            # split at white spaces afterwards ✅
        # categorise name parts ✅
            # if split item starts & ends on ' -> it's a nickname ✅
            # figure out which bits are first names, last names & aliases ✅
        # complete name parts where missing ✅
            # complete first/last names where missing from one double but present in the other ✅
            # add aliases where obviously missing ✅

# add original fandom instances to character profiles
    # ONLY THE INSTANCES *THIS CHARACTER* IS LISTED WITH -> consult main data sets
    # eg their fandom may have many instances but they were only listed for these ones specifically
    # -> to keep track of that as we clean, same as w fandoms
# make a file that contains 
    # new name of character
    # all old names of character
    # fandom they're from (new name)
    # og instances of fandom they were listed with
    # -> to look up & replace main files from later

# -> other details will be in their separate files to be in their own tables later!
    # we should make a file that doesn't have two keys but instead is json lines or csv format
    #   with all RPF & fictional fandoms mixed in
    #   w the respective fandom's details in one line
    # and then another one to do the same w characters & their details


stage 5: adding additional info 
(gender, race, media types, important dates, canon pairings, family relations)

# add gender where same-sex slash pairings
    # start from latest info
    # do not replace after it's been added
    # if it's not a same-sex slash pairing, hence has another label, 
    #   find a way to skip or keep track of other label
# same for race where in order or same
    # from most recent info, do not replace w older info
    # otherwise keep track of untouched labels for later research & categorisation


# - adding types of media for fictional category
        # -many fandoms will have multiple adaptations
        # -categories I def saw so far:
            # movies (live action)
            # TV (live action)
            # web series
            # comics
            # books
            # musicals
            # animation
        # (if I find more translated versions from international properties in 
        # this research process I shall add them to their names as a case in previous function)
    # -> also add country of origin while we're at it
        # eg anime wouldn't be labelled anime, simply as "animation" from "japan"
        # -countries are easy enough to look up while looking up the property itself
        # -some fandoms may have international adaptations, hence have several countries listed
            # ex one piece from japan, but has a western adaptation now too
            # -how do we handle shows that are produced cross-countries tho? 
            # like where it was shot & made across more than one country per thing
            # & actors f.e. are from all over the place too (like the one piece example,
            # does it have an official country of origin? do we count it as US american? 
            # there were so many british ppl tho, 
            # and I know how much the americans produce over here)
                # maybe count it as the country that the production company is sitting in
                # even if it was shot/made elsewhere
                # as that's who came up with the idea & spent the money & now owns the thing
                # ex new batman movie was shot in the UK but would count 
                # as american cause the americans produced it right?
        # -for RPF list country of origin/residence of people in question
        # or where present country(ies) of origin of the media they are famous for
            # eg kpop groups should be listed as korean (even if some of the members aren't)
            # eg US american movies/TV should be listed as US american
            # but eg youtubers or sports are global categories, 
                # so should be listed for specific ppl involved instead
    # and release years while we're at it where possible
        # where it's many things we should add them individually maybe (like marvel & DC)
        # for series/franchises that spanned multiple years include beginning & end years
        # -> do "relevant dates" item instead of simply release year
            # -> contains release dates, end dates, season releases, 
            # important events if I know of them (like destiel confession)

# - for pairings: add a columns abt whether they're canon or not bc that's a stat I'd like to track
    # however I'm aware of how hard this may end up being to determine for all the pairings, 
    # so uh at least the ones I know about
    # also for pairings where they are canon in one version and not canon in another 
    # (eg destiel only being canon in spanish lmao, or lan zhan/wwx only being canon in the book)
    # -> have it be more options than just is_canon: true/false, to account for those ones
# - ALSO! add a related column to be able to query for incest ships lmao
    # we can have in the character profiles a section for family members of theirs, to then 
    # base the related column on




source venv/bin/activate && export PYTHONPATH=$(pwd)


file running order to update stage 4 helper files:

    python src/fourth_stage_fixing_values_code/unify_fandoms.py
    python src/fourth_stage_fixing_values_code/updating_fandom_characters.py
    python src/fourth_stage_fixing_values_code/separate_names_into_parts.py
    python src/fourth_stage_fixing_values_code/categorise_character_names.py
    python src/fourth_stage_fixing_values_code/complete_character_names.py

    -unify_fandoms.py
        - reads from:
            third_clean_up_data_json_lines_version folder   <- dependant on json lines files
        - updates: 
            unified_full_fandoms_list.json
            full_fandoms_list.json
    -updating_fandom_characters.py
        - reads from:
            third_clean_up_data_json_lines_version folder   <- dependant on json lines files
            unified_full_fandoms_list.json                  <- dependant on unify_fandoms
        - updates:
            full_characters_per_fandom.json
    -separate_names_into_parts.py
        - reads from:
            third_clean_up_data folder                      <- dependant on non-json lines files
        - updates:
            full_characters_list.json
            cleaned_characters_list_1_no_brackets.json
            cleaned_characters_list_2_split_names.json
    -categorise_character_names.py
        - imports from: 
            separate_names_into_parts.py                    <- dependant on separate_names_into_parts
        - reads from:
            full_characters_per_fandom.json                 <- dependant on updating_fandom_characters
        - updates:
            cleaned_characters_list_3_categorised_names.json
    -complete_character_names.py
        - imports from:
            separate_names_into_parts.py                    <- dependant on separate_names_into_parts
            categorise_character_names.py                   <- dependant on categorise_character_names
        - updates:
            cleaned_characters_list_3_abbreviated.json